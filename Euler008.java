import java.util.Date;

/*
 Project Euler Problem 8
 =======================

 Find the greatest product of thirteen consecutive digits in the 1000-digit
 number.

 73167176531330624919225119674426574742355349194934
 96983520312774506326239578318016984801869478851843
 85861560789112949495459501737958331952853208805511
 12540698747158523863050715693290963295227443043557
 66896648950445244523161731856403098711121722383113
 62229893423380308135336276614282806444486645238749
 30358907296290491560440772390713810515859307960866
 70172427121883998797908792274921901699720888093776
 65727333001053367881220235421809751254540594752243
 52584907711670556013604839586446706324415722155397
 53697817977846174064955149290862569321978468622482
 83972241375657056057490261407972968652414535100474
 82166370484403199890008895243450658541227588666881
 16427171479924442928230863465674813919123162824586
 17866458359124566529476545682848912883142607690042
 24219022671055626321111109370544217506941658960408
 07198403850962455444362981230987879927244284909188
 84580156166097919133875499200524063689912560717606
 05886116467109405077541002256983155200055935729725
 71636269561882670428252483600823257530420752963450
 */

public class Euler008 {
    public static void main(String[] args) {
        Date start, end;
        start = new Date();
        
        String number = "73167176531330624919225119674426574742355349194934969"
                + "83520312774506326239578318016984801869478851843858615607891"
                + "12949495459501737958331952853208805511125406987471585238630"
                + "50715693290963295227443043557668966489504452445231617318564"
                + "03098711121722383113622298934233803081353362766142828064444"
                + "86645238749303589072962904915604407723907138105158593079608"
                + "66701724271218839987979087922749219016997208880937766572733"
                + "30010533678812202354218097512545405947522435258490771167055"
                + "60136048395864467063244157221553975369781797784617406495514"
                + "92908625693219784686224828397224137565705605749026140797296"
                + "86524145351004748216637048440319989000889524345065854122758"
                + "86668811642717147992444292823086346567481391912316282458617"
                + "86645835912456652947654568284891288314260769004224219022671"
                + "05562632111110937054421750694165896040807198403850962455444"
                + "36298123098787992724428490918884580156166097919133875499200"
                + "52406368991256071760605886116467109405077541002256983155200"
                + "05593572972571636269561882670428252483600823257530420752963450";
        int product = 0;
        int largestSum = 0;
        for (int i = 0; i < 996; i++) {
            product = num(number, i) * num(number, i + 1) * num(number, i + 2)
                    * num(number, i + 3) * num(number, i + 4);
            if (product > largestSum)
                largestSum = product;
        }
        System.out.println("The largest sum = " + largestSum);
        end = new Date();
        
        System.out.println("Execution Time: "
                + (end.getTime() - start.getTime()));
    }

    public static int num(String s, int i) {
        return Integer.parseInt(s.substring(i, i + 1));
    }
}
