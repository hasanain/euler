/*
 Project Euler Problem 2
 =======================

 Each new term in the Fibonacci sequence is generated by adding the
 previous two terms. By starting with 1 and 2, the first 10 terms will be:

 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

 Find the sum of all the even-valued terms in the sequence which do not
 exceed four million.
*/
package main

import (
	"fmt"
)

func main() {
	var sum int
	limit := 4_000_000
	memoized_fib := memoize(fib)
	for i := 0; i <= limit; i++ {
		res := memoized_fib(i)
		if res%2 == 0 {
			sum += res
		}
		if res > limit {
			break
		}
	}

	fmt.Printf("sum: %v\n", sum)
}

func memoize(f func(int) int) func(int) int {
	cache := make(map[int]int)
	return func(n int) int {
		if v, exists := cache[n]; exists {
			return v
		}
		val := f(n)
		cache[n] = val
		return val
	}
}

func fib(n int) int {
    a, b := 0, 1
    for i := 0; i < n; i++ {
        a, b = b , a + b
    }
    return a
}
